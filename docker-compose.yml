version: '3.8'

services:
  # Aplicación NestJS
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: nestjs-backoffice-api
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3001}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_NAME=${DB_NAME:-nestjs_backoffice}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-1d}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: nestjs-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres123}
      - POSTGRES_DB=${DB_NAME:-nestjs_backoffice}
    ports:
      - "${DB_PORT_EXTERNAL:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  # Redis para cache y sessions
  redis:
    image: redis:7-alpine
    container_name: nestjs-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT_EXTERNAL:-6380}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Adminer para gestión de BD (opcional)
  adminer:
    image: adminer:latest
    container_name: nestjs-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    depends_on:
      - postgres
    environment:
      - ADMINER_DEFAULT_SERVER=${DB_HOST:-postgres}

volumes:
  postgres_data:
  redis_data: 